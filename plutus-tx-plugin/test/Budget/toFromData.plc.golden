(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind
      (strict)
      (vardecl fToDataBool_ctoBuiltinData (fun Bool (con data)))
      (lam
        ds
        Bool
        {
          [
            [
              { [ Bool_match ds ] (all dead (type) (con data)) }
              (abs
                dead
                (type)
                [
                  [ (builtin constrData) (con integer 1) ]
                  [ (builtin mkNilData) unitval ]
                ]
              )
            ]
            (abs
              dead
              (type)
              [
                [ (builtin constrData) (con integer 0) ]
                [ (builtin mkNilData) unitval ]
              ]
            )
          ]
          (all dead (type) dead)
        }
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict) (vardecl reconstructCaseError (con string)) (con string "PT1")
    )
    (termbind
      (strict)
      (vardecl fUnsafeFromDataBool_cunsafeFromBuiltinData (fun (con data) Bool))
      (lam
        d
        (con data)
        (let
          (nonrec)
          (termbind
            (strict)
            (vardecl
              tup [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
            )
            [ (builtin unConstrData) d ]
          )
          (termbind
            (strict)
            (vardecl index (con integer))
            [
              { { (builtin fstPair) (con integer) } [ (con list) (con data) ] }
              tup
            ]
          )
          [
            [
              [
                [
                  { (builtin ifThenElse) (fun (con unit) Bool) }
                  [ [ (builtin equalsInteger) index ] (con integer 1) ]
                ]
                (lam ds (con unit) True)
              ]
              (lam
                ds
                (con unit)
                [
                  [
                    [
                      [
                        { (builtin ifThenElse) (fun (con unit) Bool) }
                        [ [ (builtin equalsInteger) index ] (con integer 0) ]
                      ]
                      (lam ds (con unit) False)
                    ]
                    (lam
                      ds
                      (con unit)
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl thunk (con unit))
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl wild Unit)
                              [
                                [
                                  { (builtin trace) Unit } reconstructCaseError
                                ]
                                Unit
                              ]
                            )
                            unitval
                          )
                        )
                        (error Bool)
                      )
                    )
                  ]
                  unitval
                ]
              )
            ]
            unitval
          ]
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Tuple3 (fun (type) (fun (type) (fun (type) (type)))))
        (tyvardecl a (type)) (tyvardecl b (type)) (tyvardecl c (type))
        Tuple3_match
        (vardecl Tuple3 (fun a (fun b (fun c [ [ [ Tuple3 a ] b ] c ]))))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Either (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Either_match
        (vardecl Left (fun a [ [ Either a ] b ]))
        (vardecl Right (fun b [ [ Either a ] b ]))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    [
      [
        [
          (let
            (nonrec)
            (typebind
              (tyvardecl b (type))
              [ Maybe [ [ [ Tuple3 Bool ] (con integer) ] Bool ] ]
            )
            (lam
              dUnsafeFromData
              [ (lam a (type) (fun (con data) a)) (con integer) ]
              (lam
                dUnsafeFromData
                [ (lam a (type) (fun (con data) a)) b ]
                (lam
                  d
                  (con data)
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl
                        tup
                        [
                          [ (con pair) (con integer) ] [ (con list) (con data) ]
                        ]
                      )
                      [ (builtin unConstrData) d ]
                    )
                    (termbind
                      (strict)
                      (vardecl index (con integer))
                      [
                        {
                          { (builtin fstPair) (con integer) }
                          [ (con list) (con data) ]
                        }
                        tup
                      ]
                    )
                    [
                      [
                        [
                          [
                            {
                              (builtin ifThenElse)
                              (fun (con unit) [ [ Either (con integer) ] b ])
                            }
                            [
                              [ (builtin equalsInteger) index ] (con integer 1)
                            ]
                          ]
                          (lam
                            ds
                            (con unit)
                            (let
                              (nonrec)
                              (termbind
                                (strict)
                                (vardecl arg (con data))
                                [
                                  { (builtin headList) (con data) }
                                  [
                                    {
                                      { (builtin sndPair) (con integer) }
                                      [ (con list) (con data) ]
                                    }
                                    tup
                                  ]
                                ]
                              )
                              [
                                { { Right (con integer) } b }
                                [ dUnsafeFromData arg ]
                              ]
                            )
                          )
                        ]
                        (lam
                          ds
                          (con unit)
                          [
                            [
                              [
                                [
                                  {
                                    (builtin ifThenElse)
                                    (fun
                                      (con unit) [ [ Either (con integer) ] b ]
                                    )
                                  }
                                  [
                                    [ (builtin equalsInteger) index ]
                                    (con integer 0)
                                  ]
                                ]
                                (lam
                                  ds
                                  (con unit)
                                  (let
                                    (nonrec)
                                    (termbind
                                      (strict)
                                      (vardecl arg (con data))
                                      [
                                        { (builtin headList) (con data) }
                                        [
                                          {
                                            { (builtin sndPair) (con integer) }
                                            [ (con list) (con data) ]
                                          }
                                          tup
                                        ]
                                      ]
                                    )
                                    [
                                      { { Left (con integer) } b }
                                      [ dUnsafeFromData arg ]
                                    ]
                                  )
                                )
                              ]
                              (lam
                                ds
                                (con unit)
                                (let
                                  (nonrec)
                                  (termbind
                                    (strict)
                                    (vardecl thunk (con unit))
                                    (let
                                      (nonrec)
                                      (termbind
                                        (strict)
                                        (vardecl wild Unit)
                                        [
                                          [
                                            { (builtin trace) Unit }
                                            reconstructCaseError
                                          ]
                                          Unit
                                        ]
                                      )
                                      unitval
                                    )
                                  )
                                  (error [ [ Either (con integer) ] b ])
                                )
                              )
                            ]
                            unitval
                          ]
                        )
                      ]
                      unitval
                    ]
                  )
                )
              )
            )
          )
          (builtin unIData)
        ]
        [
          (let
            (nonrec)
            (typebind
              (tyvardecl a (type)) [ [ [ Tuple3 Bool ] (con integer) ] Bool ]
            )
            (lam
              dUnsafeFromData
              [ (lam a (type) (fun (con data) a)) a ]
              (lam
                d
                (con data)
                (let
                  (nonrec)
                  (termbind
                    (strict)
                    (vardecl
                      tup
                      [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
                    )
                    [ (builtin unConstrData) d ]
                  )
                  (termbind
                    (strict)
                    (vardecl index (con integer))
                    [
                      {
                        { (builtin fstPair) (con integer) }
                        [ (con list) (con data) ]
                      }
                      tup
                    ]
                  )
                  [
                    [
                      [
                        [
                          { (builtin ifThenElse) (fun (con unit) [ Maybe a ]) }
                          [ [ (builtin equalsInteger) index ] (con integer 0) ]
                        ]
                        (lam
                          ds
                          (con unit)
                          (let
                            (nonrec)
                            (termbind
                              (strict)
                              (vardecl arg (con data))
                              [
                                { (builtin headList) (con data) }
                                [
                                  {
                                    { (builtin sndPair) (con integer) }
                                    [ (con list) (con data) ]
                                  }
                                  tup
                                ]
                              ]
                            )
                            [ { Just a } [ dUnsafeFromData arg ] ]
                          )
                        )
                      ]
                      (lam
                        ds
                        (con unit)
                        [
                          [
                            [
                              [
                                {
                                  (builtin ifThenElse)
                                  (fun (con unit) [ Maybe a ])
                                }
                                [
                                  [ (builtin equalsInteger) index ]
                                  (con integer 1)
                                ]
                              ]
                              (lam ds (con unit) { Nothing a })
                            ]
                            (lam
                              ds
                              (con unit)
                              (let
                                (nonrec)
                                (termbind
                                  (strict)
                                  (vardecl thunk (con unit))
                                  (let
                                    (nonrec)
                                    (termbind
                                      (strict)
                                      (vardecl wild Unit)
                                      [
                                        [
                                          { (builtin trace) Unit }
                                          reconstructCaseError
                                        ]
                                        Unit
                                      ]
                                    )
                                    unitval
                                  )
                                )
                                (error [ Maybe a ])
                              )
                            )
                          ]
                          unitval
                        ]
                      )
                    ]
                    unitval
                  ]
                )
              )
            )
          )
          (lam
            d
            (con data)
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl
                  tup [ [ (con pair) (con integer) ] [ (con list) (con data) ] ]
                )
                [ (builtin unConstrData) d ]
              )
              (termbind
                (nonstrict)
                (vardecl t [ (con list) (con data) ])
                [
                  {
                    { (builtin sndPair) (con integer) }
                    [ (con list) (con data) ]
                  }
                  tup
                ]
              )
              (termbind
                (nonstrict)
                (vardecl t [ (con list) (con data) ])
                [ { (builtin tailList) (con data) } t ]
              )
              (termbind
                (strict)
                (vardecl index (con integer))
                [
                  {
                    { (builtin fstPair) (con integer) }
                    [ (con list) (con data) ]
                  }
                  tup
                ]
              )
              [
                [
                  [
                    [
                      {
                        (builtin ifThenElse)
                        (fun
                          (con unit) [ [ [ Tuple3 Bool ] (con integer) ] Bool ]
                        )
                      }
                      [ [ (builtin equalsInteger) index ] (con integer 0) ]
                    ]
                    (lam
                      ds
                      (con unit)
                      (let
                        (nonrec)
                        (termbind
                          (strict)
                          (vardecl arg (con data))
                          [ { (builtin headList) (con data) } t ]
                        )
                        (termbind
                          (strict)
                          (vardecl arg (con data))
                          [ { (builtin headList) (con data) } t ]
                        )
                        (termbind
                          (strict)
                          (vardecl arg (con data))
                          [
                            { (builtin headList) (con data) }
                            [ { (builtin tailList) (con data) } t ]
                          ]
                        )
                        [
                          [
                            [
                              { { { Tuple3 Bool } (con integer) } Bool }
                              [ fUnsafeFromDataBool_cunsafeFromBuiltinData arg ]
                            ]
                            [ (builtin unIData) arg ]
                          ]
                          [ fUnsafeFromDataBool_cunsafeFromBuiltinData arg ]
                        ]
                      )
                    )
                  ]
                  (lam
                    ds
                    (con unit)
                    (let
                      (nonrec)
                      (termbind
                        (strict)
                        (vardecl thunk (con unit))
                        (let
                          (nonrec)
                          (termbind
                            (strict)
                            (vardecl wild Unit)
                            [
                              [ { (builtin trace) Unit } reconstructCaseError ]
                              Unit
                            ]
                          )
                          unitval
                        )
                      )
                      (error [ [ [ Tuple3 Bool ] (con integer) ] Bool ])
                    )
                  )
                ]
                unitval
              ]
            )
          )
        ]
      ]
      [
        [ (builtin constrData) (con integer 1) ]
        [
          [
            { (builtin mkCons) (con data) }
            [
              [ (builtin constrData) (con integer 0) ]
              [
                [
                  { (builtin mkCons) (con data) }
                  (let
                    (nonrec)
                    (termbind
                      (strict)
                      (vardecl w [ [ [ Tuple3 Bool ] (con integer) ] Bool ])
                      [
                        [
                          [ { { { Tuple3 Bool } (con integer) } Bool } True ]
                          (con integer 1)
                        ]
                        False
                      ]
                    )
                    [
                      {
                        [ { { { Tuple3_match Bool } (con integer) } Bool } w ]
                        (con data)
                      }
                      (lam
                        ww
                        Bool
                        (lam
                          ww
                          (con integer)
                          (lam
                            ww
                            Bool
                            [
                              [ (builtin constrData) (con integer 0) ]
                              [
                                [
                                  { (builtin mkCons) (con data) }
                                  [ fToDataBool_ctoBuiltinData ww ]
                                ]
                                [
                                  [
                                    { (builtin mkCons) (con data) }
                                    [ (builtin iData) ww ]
                                  ]
                                  [
                                    [
                                      { (builtin mkCons) (con data) }
                                      [ fToDataBool_ctoBuiltinData ww ]
                                    ]
                                    [ (builtin mkNilData) unitval ]
                                  ]
                                ]
                              ]
                            ]
                          )
                        )
                      )
                    ]
                  )
                ]
                [ (builtin mkNilData) unitval ]
              ]
            ]
          ]
          [ (builtin mkNilData) unitval ]
        ]
      ]
    ]
  )
)