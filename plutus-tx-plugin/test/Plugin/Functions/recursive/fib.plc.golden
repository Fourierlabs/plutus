(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl fib (fun (con integer) (con integer)))
        (lam
          n
          (con integer)
          {
            [
              [
                {
                  [
                    Bool_match
                    [
                      [
                        [
                          { ifThenElse Bool }
                          [ [ equalsInteger n ] (con integer 0) ]
                        ]
                        True
                      ]
                      False
                    ]
                  ]
                  (all dead (type) (con integer))
                }
                (abs dead (type) (con integer 0))
              ]
              (abs
                dead
                (type)
                {
                  [
                    [
                      {
                        [
                          Bool_match
                          [
                            [
                              [
                                { ifThenElse Bool }
                                [ [ equalsInteger n ] (con integer 1) ]
                              ]
                              True
                            ]
                            False
                          ]
                        ]
                        (all dead (type) (con integer))
                      }
                      (abs dead (type) (con integer 1))
                    ]
                    (abs
                      dead
                      (type)
                      [
                        [
                          addInteger
                          [ fib [ [ subtractInteger n ] (con integer 1) ] ]
                        ]
                        [ fib [ [ subtractInteger n ] (con integer 2) ] ]
                      ]
                    )
                  ]
                  (all dead (type) dead)
                }
              )
            ]
            (all dead (type) dead)
          }
        )
      )
      fib
    )
  )
)