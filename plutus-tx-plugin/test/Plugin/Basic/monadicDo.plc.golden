(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (lam
      ds
      [ Maybe (con integer) ]
      (lam
        ds
        [ Maybe (con integer) ]
        {
          [
            [
              {
                [ { Maybe_match (con integer) } ds ]
                (all dead (type) [ Maybe (con integer) ])
              }
              (lam
                x
                (con integer)
                (abs
                  dead
                  (type)
                  {
                    [
                      [
                        {
                          [ { Maybe_match (con integer) } ds ]
                          (all dead (type) [ Maybe (con integer) ])
                        }
                        (lam
                          x
                          (con integer)
                          (abs
                            dead
                            (type)
                            [ { Just (con integer) } [ [ addInteger x ] x ] ]
                          )
                        )
                      ]
                      (abs dead (type) { Nothing (con integer) })
                    ]
                    (all dead (type) dead)
                  }
                )
              )
            ]
            (abs dead (type) { Nothing (con integer) })
          ]
          (all dead (type) dead)
        }
      )
    )
  )
)