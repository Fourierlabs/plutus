(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Maybe (fun (type) (type)))
        (tyvardecl a (type))
        Maybe_match
        (vardecl Just (fun a [ Maybe a ])) (vardecl Nothing [ Maybe a ])
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (lam
      ds
      [ Maybe [ [ Tuple2 (con integer) ] (con integer) ] ]
      (lam
        ds
        [ Maybe (con integer) ]
        {
          [
            [
              {
                [
                  { Maybe_match [ [ Tuple2 (con integer) ] (con integer) ] } ds
                ]
                (all dead (type) [ Maybe (con integer) ])
              }
              (lam
                x
                [ [ Tuple2 (con integer) ] (con integer) ]
                (abs
                  dead
                  (type)
                  [
                    {
                      [ { { Tuple2_match (con integer) } (con integer) } x ]
                      [ Maybe (con integer) ]
                    }
                    (lam
                      x
                      (con integer)
                      (lam
                        x
                        (con integer)
                        {
                          [
                            [
                              {
                                [ { Maybe_match (con integer) } ds ]
                                (all dead (type) [ Maybe (con integer) ])
                              }
                              (lam
                                x
                                (con integer)
                                (abs
                                  dead
                                  (type)
                                  [
                                    { Just (con integer) }
                                    [ [ addInteger [ [ addInteger x ] x ] ] x ]
                                  ]
                                )
                              )
                            ]
                            (abs dead (type) { Nothing (con integer) })
                          ]
                          (all dead (type) dead)
                        }
                      )
                    )
                  ]
                )
              )
            ]
            (abs dead (type) { Nothing (con integer) })
          ]
          (all dead (type) dead)
        }
      )
    )
  )
)