(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl
        divideInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin divideInteger)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl wild Bool)
      [
        [
          [
            { ifThenElse Bool }
            [
              [
                equalsInteger
                [ [ divideInteger (con integer 1) ] (con integer 0) ]
              ]
              (con integer 0)
            ]
          ]
          True
        ]
        False
      ]
    )
    (con integer 1)
  )
)