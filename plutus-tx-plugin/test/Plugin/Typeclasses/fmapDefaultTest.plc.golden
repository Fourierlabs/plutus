(program
  (let
    (nonrec)
    (termbind (strict) (vardecl ds (con integer)) (con integer 1))
    (termbind
      (strict)
      (vardecl
        fApplicativeIdentity_c
        (all
          a
          (type)
          (all
            b
            (type)
            (fun
              [ (lam a (type) a) (fun a b) ]
              (fun [ (lam a (type) a) a ] [ (lam a (type) a) b ])
            )
          )
        )
      )
      (abs
        a
        (type)
        (abs
          b
          (type)
          (lam
            ds
            [ (lam a (type) a) (fun a b) ]
            (lam ds [ (lam a (type) a) a ] [ ds ds ])
          )
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        fApplicativeIdentity_cpure (all a (type) (fun a [ (lam a (type) a) a ]))
      )
      (abs a (type) (lam v a v))
    )
    (termbind
      (strict)
      (vardecl
        fFunctorIdentity_cfmap
        (all
          a
          (type)
          (all
            b
            (type)
            (fun (fun a b) (fun [ (lam a (type) a) a ] [ (lam a (type) a) b ]))
          )
        )
      )
      (abs
        a
        (type)
        (abs
          b (type) (lam f (fun a b) (lam ds [ (lam a (type) a) a ] [ f ds ]))
        )
      )
    )
    (datatypebind
      (datatype
        (tyvardecl Applicative (fun (fun (type) (type)) (type)))
        (tyvardecl f (fun (type) (type)))
        Applicative_match
        (vardecl
          CConsApplicative
          (fun
            [
              (lam
                f
                (fun (type) (type))
                (all
                  a (type) (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                )
              )
              f
            ]
            (fun
              (all a (type) (fun a [ f a ]))
              (fun
                (all
                  a
                  (type)
                  (all b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ])))
                )
                [ Applicative f ]
              )
            )
          )
        )
      )
    )
    (termbind
      (nonstrict)
      (vardecl fApplicativeIdentity [ Applicative (lam a (type) a) ])
      [
        [
          [ { CConsApplicative (lam a (type) a) } fFunctorIdentity_cfmap ]
          fApplicativeIdentity_cpure
        ]
        fApplicativeIdentity_c
      ]
    )
    (termbind
      (strict)
      (vardecl
        p1Applicative
        (all
          f
          (fun (type) (type))
          (fun
            [ Applicative f ]
            [
              (lam
                f
                (fun (type) (type))
                (all
                  a (type) (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                )
              )
              f
            ]
          )
        )
      )
      (abs
        f
        (fun (type) (type))
        (lam
          v
          [ Applicative f ]
          [
            {
              [ { Applicative_match f } v ]
              [
                (lam
                  f
                  (fun (type) (type))
                  (all
                    a
                    (type)
                    (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                  )
                )
                f
              ]
            }
            (lam
              v
              [
                (lam
                  f
                  (fun (type) (type))
                  (all
                    a
                    (type)
                    (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                  )
                )
                f
              ]
              (lam
                v
                (all a (type) (fun a [ f a ]))
                (lam
                  v
                  (all
                    a
                    (type)
                    (all b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ])))
                  )
                  v
                )
              )
            )
          ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        bad_name
        (all
          f
          (fun (type) (type))
          (fun
            [ Applicative f ]
            (all
              a
              (type)
              (all b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ])))
            )
          )
        )
      )
      (abs
        f
        (fun (type) (type))
        (lam
          v
          [ Applicative f ]
          [
            {
              [ { Applicative_match f } v ]
              (all
                a
                (type)
                (all b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ])))
              )
            }
            (lam
              v
              [
                (lam
                  f
                  (fun (type) (type))
                  (all
                    a
                    (type)
                    (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                  )
                )
                f
              ]
              (lam
                v
                (all a (type) (fun a [ f a ]))
                (lam
                  v
                  (all
                    a
                    (type)
                    (all b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ])))
                  )
                  v
                )
              )
            )
          ]
        )
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            pure
            (all
              f
              (fun (type) (type))
              (fun [ Applicative f ] (all a (type) (fun a [ f a ])))
            )
          )
          (abs
            f
            (fun (type) (type))
            (lam
              v
              [ Applicative f ]
              [
                { [ { Applicative_match f } v ] (all a (type) (fun a [ f a ])) }
                (lam
                  v
                  [
                    (lam
                      f
                      (fun (type) (type))
                      (all
                        a
                        (type)
                        (all b (type) (fun (fun a b) (fun [ f a ] [ f b ])))
                      )
                    )
                    f
                  ]
                  (lam
                    v
                    (all a (type) (fun a [ f a ]))
                    (lam
                      v
                      (all
                        a
                        (type)
                        (all
                          b (type) (fun [ f (fun a b) ] (fun [ f a ] [ f b ]))
                        )
                      )
                      v
                    )
                  )
                )
              ]
            )
          )
        )
        (let
          (rec)
          (termbind
            (strict)
            (vardecl
              fTraversableNil_ctraverse
              (all
                f
                (fun (type) (type))
                (all
                  a
                  (type)
                  (all
                    b
                    (type)
                    (fun
                      [ Applicative f ]
                      (fun (fun a [ f b ]) (fun [ List a ] [ f [ List b ] ]))
                    )
                  )
                )
              )
            )
            (abs
              f
              (fun (type) (type))
              (abs
                a
                (type)
                (abs
                  b
                  (type)
                  (lam
                    dApplicative
                    [ Applicative f ]
                    (lam
                      ds
                      (fun a [ f b ])
                      (lam
                        ds
                        [ List a ]
                        {
                          [
                            [
                              {
                                [ { Nil_match a } ds ]
                                (all dead (type) [ f [ List b ] ])
                              }
                              (abs
                                dead
                                (type)
                                [
                                  { [ { pure f } dApplicative ] [ List b ] }
                                  { Nil b }
                                ]
                              )
                            ]
                            (lam
                              x
                              a
                              (lam
                                xs
                                [ List a ]
                                (abs
                                  dead
                                  (type)
                                  [
                                    [
                                      {
                                        {
                                          [ { bad_name f } dApplicative ]
                                          [ List b ]
                                        }
                                        [ List b ]
                                      }
                                      [
                                        [
                                          {
                                            {
                                              [
                                                { p1Applicative f } dApplicative
                                              ]
                                              b
                                            }
                                            (fun [ List b ] [ List b ])
                                          }
                                          { Cons b }
                                        ]
                                        [ ds x ]
                                      ]
                                    ]
                                    [
                                      [
                                        [
                                          {
                                            {
                                              { fTraversableNil_ctraverse f } a
                                            }
                                            b
                                          }
                                          dApplicative
                                        ]
                                        ds
                                      ]
                                      xs
                                    ]
                                  ]
                                )
                              )
                            )
                          ]
                          (all dead (type) dead)
                        }
                      )
                    )
                  )
                )
              )
            )
          )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl
                addInteger (fun (con integer) (fun (con integer) (con integer)))
              )
              (builtin addInteger)
            )
            (termbind
              (strict)
              (vardecl
                build
                (all
                  a
                  (type)
                  (fun
                    (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ]
                  )
                )
              )
              (abs
                a
                (type)
                (lam
                  g
                  (all b (type) (fun (fun a (fun b b)) (fun b b)))
                  [ [ { g [ List a ] } { Cons a } ] { Nil a } ]
                )
              )
            )
            [
              [
                [
                  {
                    {
                      { fTraversableNil_ctraverse (lam a (type) a) }
                      (con integer)
                    }
                    (con integer)
                  }
                  fApplicativeIdentity
                ]
                (lam ds (con integer) [ [ addInteger ds ] ds ])
              ]
              [
                { build (con integer) }
                (abs
                  a
                  (type)
                  (lam
                    c
                    (fun (con integer) (fun a a))
                    (lam
                      n
                      a
                      [
                        [ c (con integer 1) ]
                        [
                          [ c (con integer 2) ]
                          [ [ c (con integer 3) ] [ [ c (con integer 4) ] n ] ]
                        ]
                      ]
                    )
                  )
                )
              ]
            ]
          )
        )
      )
    )
  )
)